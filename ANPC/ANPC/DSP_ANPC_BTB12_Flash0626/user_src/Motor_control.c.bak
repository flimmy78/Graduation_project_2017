
#include "Motor_control.h"
// Prototype statements for functions found within this file.
interrupt void cpu_timer0_isr(void);
interrupt void ADC_conversion(void);
interrupt void TZ_int(void);
//interrupt void cpu_timer1_isr(void);
//interrupt void cpu_timer2_isr(void);
void scib_echoback_init(void);
void scib_fifo_init(void);
extern void scib_tx_isr(void);
extern void scib_rx_isr(void);
//=======================================================================================//

//#define mem (*(unsigned short int *)0x200000)

#define startCpuTimer0() CpuTimer0Regs.TCR.bit.TSS=0


extern void alarm_VVVF(void);
extern void alarm_VC_Sensor(void);
extern void alarm_VC_Sensorless(void);
extern void alarm_Overcurrent(void);
extern void alarm_IPMerror(void);
extern void alarm_PWMdisable(void);
extern void alarm_brake(void);
int LED_count=0;
int LED_num=0;
int LED_count2=0;
int LED_num2=0;
//-*------------------------------------------------//

//=======================================================================================//
	int AD_chan0;
	int AD_chan1;
	int AD_chan2;
	int AD_chan3;
	float Ts = 0.0001;// sample time 100us
//=======================================================================================//
	unsigned int over_current = 0;
	unsigned int IPM_error = 0;
	unsigned int pwmdisable=0;
//=======================================================================================//

	float test0,test1,test2,test3,test4;
//=======================================================================================//
	float speed_ref;
//=======================================================================================//
	float Vsd_ref,Vsq_ref;
	float flux_theta;
//=======================================================================================//

//=======================================================================================//

RMPCNTL rc1 = RMPCNTL_DEFAULTS;
RAMPGEN rg1 = RAMPGEN_DEFAULTS;
IPARK ipark1 = IPARK_DEFAULTS;
zheng_svm  svm1 = zheng_svm_DEFAULTS;
PWM_Update pwm1 = PWM_Update_DEFAULTS;
//=======================================================================================//
void main(void)
{

// Step 1. Initialize System Control:
// PLL, WatchDog, enable Peripheral Clocks
// This example function is found in the DSP2833x_SysCtrl.c file.
   InitSysCtrl();

// Step 2. Initalize GPIO:
// This example function is found in the DSP2833x_Gpio.c file and
// illustrates how to set the GPIO to it's default state.
// InitGpio();  // Skipped for this example
   InitXintf();
//   InitXintf16Gpio();	//zq
//	InitGpio();
//=======================================================================================//

//   
// Step 3. Clear all interrupts and initialize PIE vector table:
// Disable CPU interrupts
   DINT;

// Initialize the PIE control registers to their default state.
// The default state is all PIE interrupts disabled and flags
// are cleared.
// This function is found in the DSP2833x_PieCtrl.c file.
   InitPieCtrl();

// Disable CPU interrupts and clear all CPU interrupt flags:
   IER = 0x0000;
   IFR = 0x0000;

// Initialize the PIE vector table with pointers to the shell Interrupt
// Service Routines (ISR).
// This will populate the entire table, even if the interrupt
// is not used in this example.  This is useful for debug purposes.
// The shell ISR routines are found in DSP2833x_DefaultIsr.c.
// This function is found in DSP2833x_PieVect.c.
   InitPieVectTable();
//===============================================================================================//
// Interrupts that are used in this example are re-mapped to
// ISR functions found within this file.
   EALLOW;  // This is needed to write to EALLOW protected registers
   PieVectTable.TINT0 = &cpu_timer0_isr;
   //PieVectTable.XINT13 = &cpu_timer1_isr;
   //PieVectTable.TINT2 = &cpu_timer2_isr;
//   PieVectTable.SCIRXINTA=&scia_rx_isr;
//   PieVectTable.SCITXINTA=&scia_tx_isr;
	PieVectTable.SCIRXINTB=&scib_rx_isr;
    PieVectTable.SCITXINTB=&scib_tx_isr;
//   PieVectTable.ADCINT = &ADC_conversion;
   PieVectTable.SEQ1INT = &ADC_conversion;
   PieVectTable.EPWM1_TZINT = &TZ_int;

   EDIS;    // This is needed to disable write to EALLOW protected registers
//===============================================================================================//
// Step 4. Initialize the Device Peripheral. This function can be
//         found in DSP2833x_CpuTimers.c
   InitCpuTimers();   // For this example, only initialize the Cpu Timers

#if (CPU_FRQ_150MHZ)
// Configure CPU-Timer 0, 1, and 2 to interrupt every second:
// 150MHz CPU Freq, 1 second Period (in uSeconds)

   ConfigCpuTimer(&CpuTimer0, 150, 1000000);
   //ConfigCpuTimer(&CpuTimer1, 150, 1000000);
   //ConfigCpuTimer(&CpuTimer2, 150, 1000000);
#endif

#if (CPU_FRQ_100MHZ)
// Configure CPU-Timer 0, 1, and 2 to interrupt every second:
// 100MHz CPU Freq, 1 second Period (in uSeconds)

   ConfigCpuTimer(&CpuTimer0, 100, 1000000);
   //ConfigCpuTimer(&CpuTimer1, 100, 1000000);
   //ConfigCpuTimer(&CpuTimer2, 100, 1000000);
#endif
// To ensure precise timing, use write-only instructions to write to the entire register. Therefore, if any
// of the configuration bits are changed in ConfigCpuTimer and InitCpuTimers (in DSP2833x_CpuTimers.h), the
// below settings must also be updated.

   //CpuTimer0Regs.TCR.all = 0x4001; // Use write-only instruction to set TSS bit = 0
   //CpuTimer1Regs.TCR.all = 0x4001; // Use write-only instruction to set TSS bit = 0
   //CpuTimer2Regs.TCR.all = 0x4001; // Use write-only instruction to set TSS bit = 0
//===============================================================================================//
	// Step 5. User specific code, enable interrupts:
	CpuTimer0Regs.PRD.all=0x3A98;//15000   100us
	CpuTimer0Regs.TPR.all=0;
	CpuTimer0Regs.TIM.all=0;
	CpuTimer0Regs.TPRH.all=0;
	CpuTimer0Regs.TCR.bit.TSS=1;
	CpuTimer0Regs.TCR.bit.SOFT=1;
	CpuTimer0Regs.TCR.bit.FREE=1;
	CpuTimer0Regs.TCR.bit.TRB=1;
	CpuTimer0Regs.TCR.bit.TIE=1;
	CpuTimer0.InterruptCount=0;
	startCpuTimer0();

// Enable CPU int1 which is connected to CPU-Timer 0, CPU int13
// which is connected to CPU-Timer 1, and CPU int 14, which is connected
// to CPU-Timer 2:

//===============================================================================================//
//   InitSciaGpio();
	InitScibGpio();
	 
    scib_fifo_init();	   // Initialize the SCI FIFO
    scib_echoback_init();  // Initalize SCI for echoback
    SCOPEINITNOLOOP();	
//===============================================================================================//
//--------------------------------------------------------------------------------------------//
//configure for the EV module
	InitEPwmGpio();
	InitEPwmSyncGpio();
   InitAdc();         // For this example, init the ADC
   Personal_set();
//--------------------------------------------------------------------------------------------//
/*
	AdcRegs.ADCTRL1.all = 0;
// Specific ADC setup for this example:
   AdcRegs.ADCTRL1.bit.SEQ_CASC = 1;        // 1  Cascaded mode
   AdcRegs.ADCTRL1.bit.ACQ_PS = 0xe; //0xe // Sequential mode: Sample rate   = 1/[(2+ACQ_PS)*ADC clock in ns]
                        //                     = 1/(3*40ns) =8.3MHz (for 150 MHz SYSCLKOUT)
					    //                     = 1/(3*80ns) =4.17MHz (for 100 MHz SYSCLKOUT)
					    // If Simultaneous mode enabled: Sample rate = 1/[(3+ACQ_PS)*ADC clock in ns]
   AdcRegs.ADCTRL1.bit.CPS = 1;
   //-----------------------//
   AdcRegs.ADCTRL2.all = 0x0900;

   AdcRegs.ADCTRL3.bit.ADCCLKPS = 0x4;//0x4
   AdcRegs.ADCTRL3.bit.ADCBGRFDN = 0x11;
   AdcRegs.ADCTRL3.bit.ADCPWDN = 0x1;
*/

   AdcRegs.ADCMAXCONV.bit.MAX_CONV1 = 0x3;  // convert and store in 8 results registers

   AdcRegs.ADCCHSELSEQ1.bit.CONV00 = 0x0;
   AdcRegs.ADCCHSELSEQ1.bit.CONV01 = 0x1;
   AdcRegs.ADCCHSELSEQ1.bit.CONV02 = 0x4;
   AdcRegs.ADCCHSELSEQ1.bit.CONV03 = 0x2;

   AdcRegs.ADCTRL2.bit.INT_ENA_SEQ1 = 0x1;
   AdcRegs.ADCTRL2.bit.EPWM_SOCA_SEQ1 = 0x1;
   //
//============================================================================================//

//--------------------------------------------------------------------------------------------//
	EPwm1Regs.CMPA.half.CMPA = 500;// all is for the HRPWM extension
//--------------------------------------------------------------------------------------------//
	EPwm1Regs.ETSEL.bit.SOCAEN = 1;
	EPwm1Regs.ETSEL.bit.SOCASEL = ET_CTR_ZERO;
 	EPwm1Regs.ETPS.bit.SOCAPRD = ET_1ST;

//--------------------------------------------------------------------------------------------//
//===============================================================================================//
// for VVVF control
	rc1.rmp_delay_cntl = 0;
	rc1.rmp_dly_max = 100;//every 100 cycle, 10ms
	rc1.rmp_hi_limit = 100; //limited to 100Hz
	rc1.rmp_lo_limit = -100; 
	rc1.setpt_value = 0.0;
	rc1.step_freq = 0.05;// step frequency for the acceleration
	//-----------------------------------------------------//
	rg1.base_volt = 220*1.414*0.02;//220
	rg1.rmp_gain = 1.0;
	rg1.Ts = Ts;

//===============================================================================================//

   IER |= M_INT1;// for the cput time0 interrupt, ADC interrupt
   IER |= M_INT9; // for the scia interrup
   IER |= M_INT2; // for the int of TZ of PWM
   //IER |= M_INT13;
   //IER |= M_INT14;

// Enable TINT0 in the PIE: Group 1 interrupt 7
   PieCtrlRegs.PIEIER1.bit.INTx7 = 1;// for the interrupt of cpu timer0
//-------------------------------------------------------------------------------------//
//   PieCtrlRegs.PIEIER9.bit.INTx1 = 1;// for the scia
//   PieCtrlRegs.PIEIER9.bit.INTx2 = 1; // for the scia
   PieCtrlRegs.PIEIER9.bit.INTx3 = 1;// for the scib
   PieCtrlRegs.PIEIER9.bit.INTx4 = 1; // for the scib   
//-------------------------------------------------------------------------------------//

//   PieCtrlRegs.PIEIER1.bit.INTx6 = 1;
   PieCtrlRegs.PIEIER1.bit.INTx1 = 1;// for the ADC interrupt
   PieCtrlRegs.PIEIER2.bit.INTx1 = 1;// for the interrupt of TZ
//-------------------------------------------------------------------------------------//
// Enable global Interrupts and higher priority real-time debug events:
   EINT;   // Enable Global interrupt INTM
   ERTM;   // Enable Global realtime interrupt DBGM
//-------------------------------------------------------------------------------------//
	//	GpioDataRegs.GPACLEAR.bit.GPIO16 = 1; // set GPIO16 as low level for the short 

	//	GpioDataRegs.GPASET.bit.GPIO16 = 1;
	//	GpioDataRegs.GPASET.bit.GPIO17 = 1;
	GpioDataRegs.GPADAT.bit.GPIO16 =0;
	GpioDataRegs.GPADAT.bit.GPIO17 =1;
//-------------------------------------------------------------------------------------//
// just for test
	EALLOW;
   GpioCtrlRegs.GPAMUX1.bit.GPIO12 = 0;  // Configure GPIO12 as GPIO
   GpioCtrlRegs.GPAMUX1.bit.GPIO13 = 0;  // Configure GPIO13 as GPIO
   GpioCtrlRegs.GPADIR.bit.GPIO12 = 0; // as input
	GpioCtrlRegs.GPADIR.bit.GPIO13 = 0; // as input
	EDIS;
	*PWMa_enable = 1;
/*
	EALLOW;
	GpioCtrlRegs.GPBMUX1.bit.GPIO33 = 0; 
	GpioCtrlRegs.GPBDIR.bit.GPIO33 = 1;
	EDIS;*/
//-------------------------------------------------------------------------------------//

// Step 6. IDLE loop. Just sit and loop forever (optional):
 for(;;)
  {
    }

 
 }

interrupt void ADC_conversion(void)
{


	
//=======================================================================================//
	if(((*ext_in)&0x01) == 0x01 )
	{
		pwmdisable  = 1;
		*PWMa_disable = 0;
	}
	else
	{
//		*PWMa_enable = 1;
		*pwmdisable  = 0;
	}

	if(GpioDataRegs.GPADAT.bit.GPIO12 == 0)
		IPM_error = 1;
	else
		IPM_error = 0;

//	GpioDataRegs.GPBDAT.bit.GPIO33 = 0;///////////////////
//----------------------------------------------//
	LED_count++;
	if(pwmdisable ==1)
		alarm_PWMdisable();
	else if(IPM_error ==1)
		alarm_IPMerror();
	else
		alarm_VVVF();
//=======================================================================================//

// Start SEQ1
   //AdcRegs.ADCTRL2.all = 0x2000;
//   AdcRegs.ADCTRL2.bit.SOC_SEQ1 = 0x1;
//   while (AdcRegs.ADCST.bit.INT_SEQ1== 0){}
 


	AD_chan0 = AdcRegs.ADCRESULT0>>4;
	AD_chan1 = AdcRegs.ADCRESULT1>>4;
	AD_chan2 = AdcRegs.ADCRESULT2>>4;
	AD_chan3 = AdcRegs.ADCRESULT3>>4;
	

	AdcRegs.ADCST.bit.INT_SEQ1_CLR = 1;
	AdcRegs.ADCTRL2.bit.RST_SEQ1 = 1;


//=======================================================================================//
	speed_ref = Add_Val*0.01;
	
	rc1.target_value = speed_ref;
    rc1.calc(&rc1);

    rg1.rmp_freq = rc1.setpt_value;
    rg1.calc(&rg1);

	Vsd_ref = rg1.volt_out;
	Vsq_ref = 0;
	flux_theta = rg1.angle_out;
//	flux_theta = 0.25;
	ipark1.sin_ang = sin(flux_theta);
	ipark1.cos_ang = cos(flux_theta);
    ipark1.de = Vsd_ref;
    ipark1.qe = Vsq_ref;
    ipark1.ang = flux_theta;//fe1.theta_r_fe;
    ipark1.calc(&ipark1);
//	control_method = 1;

	svm1.Ualfa = ipark1.ds;
	svm1.Ubeta = ipark1.qs;
	svm1.Vdc = 540;
	svm1.calc(&svm1);
//=======================================================================================//
//	PWM_Update_Two_level(svm1.Ta, svm1.Tb, svm1.Tc);
	pwm1.Ta = svm1.Ta;
	pwm1.Tb = svm1.Tb;
	pwm1.Tc = svm1.Tc;
	pwm1.Update(&pwm1);
//=======================================================================================//
//	EPwm1Regs.CMPA.half.CMPA = 2000;
//	EPwm2Regs.CMPA.half.CMPA = 3000;

    INC_CLOCK();


    Val_Channel[0] = (int)(svm1.sector*100);// (Uint16)(10);
	Val_Channel[1] = (int)(svm1.Ta*1000); //(Uint16)(20);
	Val_Channel[2] = (int)(svm1.Tb*1000);//(Uint16)(30);
	Val_Channel[3] = (int)(svm1.Tc*1000);//(Uint16)(40);
	  
	SAVETOBUFFER();
//	GpioDataRegs.GPBDAT.bit.GPIO33 = 1;///////////////////	
//=======================================================================================//
  
	EPwm1Regs.ETCLR.bit.SOCA = 1;

	AdcRegs.ADCTRL2.bit.RST_SEQ1 = 1;         // Reset SEQ1
	AdcRegs.ADCST.bit.INT_SEQ1_CLR = 1;		// Clear INT SEQ1 bit

	PieCtrlRegs.PIEACK.all |= PIEACK_GROUP1;
}

interrupt void cpu_timer0_isr(void)
{

//=======================================================================================//
   
   CpuTimer0.InterruptCount++;

   // Acknowledge this interrupt to receive more interrupts from group 1
   PieCtrlRegs.PIEACK.all = PIEACK_GROUP1;
   CpuTimer0Regs.TCR.bit.TIF=1;
   CpuTimer0Regs.TCR.bit.TRB=1;



}

/*interrupt void cpu_timer1_isr(void)
{
   CpuTimer1.InterruptCount++;
   // The CPU acknowledges the interrupt.
   EDIS;
}

interrupt void cpu_timer2_isr(void)
{  EALLOW;
   CpuTimer2.InterruptCount++;
   // The CPU acknowledges the interrupt.
   EDIS;
}*/

interrupt void TZ_int(void)
{


PieCtrlRegs.PIEACK.all |= PIEACK_GROUP2;
}
//====================================================================================================//
void scib_echoback_init()
{
    // Note: Clocks were turned on to the SCIA peripheral
    // in the InitSysCtrl() function

 	ScibRegs.SCICCR.all =0x0007;   // 1 stop bit,  No loopback
                                   // No parity,8 char bits,
                                   // async mode, idle-line protocol
	ScibRegs.SCICTL1.all =0x0003;  // enable TX, RX, internal SCICLK,
                                   // Disable RX ERR, SLEEP, TXWAKE
	ScibRegs.SCICTL2.all =0x0003;
	ScibRegs.SCICTL2.bit.TXINTENA =1;//enable the interrupt
	ScibRegs.SCICTL2.bit.RXBKINTENA =1;

	#if (CPU_FRQ_150MHZ)
	    //  SciaRegs.SCIHBAUD    =0x0001;  // 9600 baud @LSPCLK = 37.5MHz.
	   //   SciaRegs.SCILBAUD    =0x00E7;
		ScibRegs.SCIHBAUD    =0x0000;  // 115200 baud @LSPCLK = 37.5MHz.
	    ScibRegs.SCILBAUD    =0x0028;
	#endif
	#if (CPU_FRQ_100MHZ)
      ScibRegs.SCIHBAUD    =0x0001;  // 9600 baud @LSPCLK = 20MHz.
      ScibRegs.SCILBAUD    =0x0044;
	#endif

	ScibRegs.SCICTL1.all =0x0023;  // Relinquish SCI from Reset
}

// Transmit a character from the SCI

// Initalize the SCI FIFO
void scib_fifo_init()
{
/*    SciaRegs.SCIFFTX.all=0xE040;
    SciaRegs.SCIFFRX.all=0x204f;
    SciaRegs.SCIFFCT.all=0x0;
*/
	ScibRegs.SCIFFTX.all=0xA040;
    ScibRegs.SCIFFRX.all=0x004f;
    ScibRegs.SCIFFCT.all=0x0;

}

//====================================================================================================//
